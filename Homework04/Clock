/** ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 *  File name     :  Clock.java
 *  Purpose       :  Provides a class defining methods for the ClockSolver class
 *  @author       :  Brandon Azuoma 
 *  Date written  :  2017-03-19
 *  Description   :  This class provides a bunch of methods which may be useful for the ClockSolver class
 *                   for Homework 4, part 1.  Includes the following:
 *
 *  Notes         :  None right now.  I'll add some as they occur.
 *  Warnings      :  None
 *  Exceptions    :  
 * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

public class Clock {

    private static final double DEFAULT_TIME_SLICE_IN_SECONDS = 60.0;
    private static final double INVALID_ARGUMENT_VALUE = -1.0;
    private static final double MAXIMUM_DEGREE_VALUE = 360.0;
    private static final double HOUR_HAND_DEGREES_PER_SECOND = 0.00834;
    private static final double MINUTE_HAND_DEGREES_PER_SECOND = 0.1;

    int hours;
    int minutes;
    double seconds;
    double hourAngle;
    double minuteAngle;
    double secondAngle;
    double angle;
    double timeSplit;

    /**
     *  Constructor goes here
     */
    public Clock(int hours, int minutes, double seconds) 
    {
        if (hours < 0 || hours > 12)
        {
            System.out.println("Enter a valid number of hours.");
        }
        if (minutes < 0 || minutes > 60){
            System.out.println("Enter a valid number of minutes.");
        }
        if (seconds < 0 || seconds > 60)
        {
            System.out.println("Enter a valid number of seconds.");
        }
        this.hours = hours;
        this.minutes = minutes;
        this.seconds = seconds;
    }


    public double tick(double seconds) 
    {
        this.seconds = this.seconds + timeSplit;
        while (this.seconds >= 60){
            this.seconds = this.seconds - 60;
            this.minutes = this.minutes + 1;
            while(this.minutes >= 60){
                this.minutes = this.minutes - 60;
                this.hours = this.hours + 1;
            }
        }
        return this.seconds;
    }


    public double getHourHandAngle() 
    {
        double hourAngle = (hours * 30) + (minutes * 0.5) + (seconds * 0.008333);
        while (hourAngle >= 360){
            hourAngle = hourAngle - 360;
        }
        return hourAngle;
    }

    /**
     *  Method to calculate and return the current position of the minute hand
     *  @return double-precision value of the minute hand location
     */
    public double getMinuteHandAngle() 
    {
        minuteAngle = (minutes * 6) + (seconds * 0.1);
        while (minuteAngle >= 360){
            minuteAngle = minuteAngle - 360;
        }
        return minuteAngle;
    }


    public double getHandAngle(double hourAngle, double minuteAngle) 
    {
        angle = Math.abs(hourAngle - minuteAngle);
        if (angle > 180)
        {
            angle = 360 - angle;
        }
        return angle;
    }


    public double getTotalSeconds(double totalSeconds) 
    {
        totalSeconds = (hours * 3600) + (minutes * 60) + seconds;
        return totalSeconds;
    }


    public String toString() 
    {
        return "The time is: " + hours + ":" + minutes + ":" + seconds;
    }

    public double getdelta(double timeSplit){
        double delta = (timeSplit * 11) / 240;
        return delta;
    }

    public static void main( String args[] ) {

        System.out.println( "\nCLOCK CLASS TESTER PROGRAM\n" +
            "--------------------------\n" );
        System.out.println( "  Creating a new clock: " );
        Clock clock = new Clock(12, 30, 0);
        System.out.println(clock.getHourHandAngle());
        System.out.println(clock.getMinuteHandAngle());
        System.out.println(clock.getHandAngle(clock.getHourHandAngle(), clock.getMinuteHandAngle()));
        clock.tick(180);
        System.out.println(clock.toString());
    }
}
